
UART_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001414  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000041c  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000157  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000019b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199dc  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006e0  00000000  00000000  0001b432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f439  00000000  00000000  0001bb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aaf4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000cc  00000000  00000000  000aaf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  000ab05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003ec 	.word	0x080003ec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003ec 	.word	0x080003ec

080001ec <main>:
void sendData(char*);
void receiveData(void);

char data_received[10] = { 0 };

void main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1U << 4); //Enabling UART peripheral
 80001f2:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <main+0x68>)
 80001f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001f6:	4a17      	ldr	r2, [pc, #92]	@ (8000254 <main+0x68>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	6453      	str	r3, [r2, #68]	@ 0x44

	RCC->AHB1ENR |= (1U << 0); //Enabling GPIOA port
 80001fe:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <main+0x68>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	4a14      	ldr	r2, [pc, #80]	@ (8000254 <main+0x68>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (10U << 18); // Enable Alternate function for GPIOA PIN_9 and PIN_10
 800020a:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <main+0x6c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <main+0x6c>)
 8000210:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000214:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (7U << 4);
 8000216:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <main+0x6c>)
 8000218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800021a:	4a0f      	ldr	r2, [pc, #60]	@ (8000258 <main+0x6c>)
 800021c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000220:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7U << 8);
 8000222:	4b0d      	ldr	r3, [pc, #52]	@ (8000258 <main+0x6c>)
 8000224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000226:	4a0c      	ldr	r2, [pc, #48]	@ (8000258 <main+0x6c>)
 8000228:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800022c:	6253      	str	r3, [r2, #36]	@ 0x24

	UART_Enable();
 800022e:	f000 f819 	bl	8000264 <UART_Enable>

	while (1) {

		receiveData();
 8000232:	f000 f861 	bl	80002f8 <receiveData>
		sendData("SUCESS\n");
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <main+0x70>)
 8000238:	f000 f846 	bl	80002c8 <sendData>

		for (int i = 0; i >= 100000; i++) {
 800023c:	2300      	movs	r3, #0
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	e002      	b.n	8000248 <main+0x5c>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	3301      	adds	r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <main+0x74>)
 800024c:	4293      	cmp	r3, r2
 800024e:	dcf8      	bgt.n	8000242 <main+0x56>
		receiveData();
 8000250:	e7ef      	b.n	8000232 <main+0x46>
 8000252:	bf00      	nop
 8000254:	40023800 	.word	0x40023800
 8000258:	40020000 	.word	0x40020000
 800025c:	08000404 	.word	0x08000404
 8000260:	0001869f 	.word	0x0001869f

08000264 <UART_Enable>:
		}
	}

}

void UART_Enable(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	USART1->CR1 &= ~(1U << 15); 	// Over sampling by 16
 8000268:	4b16      	ldr	r3, [pc, #88]	@ (80002c4 <UART_Enable+0x60>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a15      	ldr	r2, [pc, #84]	@ (80002c4 <UART_Enable+0x60>)
 800026e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000272:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1U << 12); 	// 8 data bits or word length
 8000274:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <UART_Enable+0x60>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <UART_Enable+0x60>)
 800027a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800027e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1U << 10); 	// Disable parity
 8000280:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <UART_Enable+0x60>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <UART_Enable+0x60>)
 8000286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800028a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 3); 		// Transmitter enable
 800028c:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <UART_Enable+0x60>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a0c      	ldr	r2, [pc, #48]	@ (80002c4 <UART_Enable+0x60>)
 8000292:	f043 0308 	orr.w	r3, r3, #8
 8000296:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 2);		// Receiver enable
 8000298:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <UART_Enable+0x60>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a09      	ldr	r2, [pc, #36]	@ (80002c4 <UART_Enable+0x60>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	60d3      	str	r3, [r2, #12]
	USART1->BRR = 0x683;  		// setting baud-rate as 9600 for a 16 MHZ clock
 80002a4:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <UART_Enable+0x60>)
 80002a6:	f240 6283 	movw	r2, #1667	@ 0x683
 80002aa:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= (1 << 13);		// UART enable
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <UART_Enable+0x60>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <UART_Enable+0x60>)
 80002b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002b6:	60d3      	str	r3, [r2, #12]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40011000 	.word	0x40011000

080002c8 <sendData>:

void sendData(char* data) {
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR |= (1U << 6))) {
 80002d0:	bf00      	nop
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <sendData+0x2c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a07      	ldr	r2, [pc, #28]	@ (80002f4 <sendData+0x2c>)
 80002d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002dc:	6013      	str	r3, [r2, #0]
		// Stay inside if the already loaded is not sent
	}
	USART1->DR = data++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	1c5a      	adds	r2, r3, #1
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	4a03      	ldr	r2, [pc, #12]	@ (80002f4 <sendData+0x2c>)
 80002e6:	6053      	str	r3, [r2, #4]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40011000 	.word	0x40011000

080002f8 <receiveData>:

void receiveData(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e017      	b.n	8000334 <receiveData+0x3c>
		while (!(USART1->SR |= (1U << 5))) {
 8000304:	bf00      	nop
 8000306:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <receiveData+0x50>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <receiveData+0x50>)
 800030c:	f043 0320 	orr.w	r3, r3, #32
 8000310:	6013      	str	r3, [r2, #0]

		}
		data_received[i] = USART1->DR;
 8000312:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <receiveData+0x50>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	b2d9      	uxtb	r1, r3
 8000318:	4a0c      	ldr	r2, [pc, #48]	@ (800034c <receiveData+0x54>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	460a      	mov	r2, r1
 8000320:	701a      	strb	r2, [r3, #0]

		if (data_received[i] == 0x10) {
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <receiveData+0x54>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b10      	cmp	r3, #16
 800032c:	d006      	beq.n	800033c <receiveData+0x44>
	for (int i = 0; i < 5; i++) {
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3301      	adds	r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b04      	cmp	r3, #4
 8000338:	dde4      	ble.n	8000304 <receiveData+0xc>
 800033a:	e000      	b.n	800033e <receiveData+0x46>
			return;
 800033c:	bf00      	nop
		}
	}

}
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40011000 	.word	0x40011000
 800034c:	2000001c 	.word	0x2000001c

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	@ (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	@ (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	@ (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	@ (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	@ (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff33 	bl	80001ec <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	20000028 	.word	0x20000028

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	@ (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	@ (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	@ (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	@ (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	0800040c 	.word	0x0800040c
 80003e0:	0800040c 	.word	0x0800040c
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	08000410 	.word	0x08000410

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
