
UART_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000304  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000014b8  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000069c  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001bd  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00001d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199dc  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000808  00000000  00000000  0001b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f4e8  00000000  00000000  0001c004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ab4ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000154  00000000  00000000  000ab530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  000ab684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000498 	.word	0x08000498

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000498 	.word	0x08000498

080001ec <main>:
 *
 */
char data_received[10] = { 0 };
uint32_t ADC_Conversion_value[2] = { 0 };

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	UART_Enable();
 80001f0:	f000 f806 	bl	8000200 <UART_Enable>
	ADC_Enable();
 80001f4:	f000 f858 	bl	80002a8 <ADC_Enable>

	while (1) {
		ADC_receive();
 80001f8:	f000 f8c8 	bl	800038c <ADC_receive>
 80001fc:	e7fc      	b.n	80001f8 <main+0xc>
	...

08000200 <UART_Enable>:
}

/*
 * UART register level Enable
 */
void UART_Enable(void) {
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (1U << 4); //Enabling UART peripheral
 8000204:	4b25      	ldr	r3, [pc, #148]	@ (800029c <UART_Enable+0x9c>)
 8000206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000208:	4a24      	ldr	r2, [pc, #144]	@ (800029c <UART_Enable+0x9c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6453      	str	r3, [r2, #68]	@ 0x44

	RCC->AHB1ENR |= (1U << 0); //Enabling GPIOA port
 8000210:	4b22      	ldr	r3, [pc, #136]	@ (800029c <UART_Enable+0x9c>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a21      	ldr	r2, [pc, #132]	@ (800029c <UART_Enable+0x9c>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (10U << 18); // Enable Alternate function for GPIOA PIN_9 and PIN_10
 800021c:	4b20      	ldr	r3, [pc, #128]	@ (80002a0 <UART_Enable+0xa0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a1f      	ldr	r2, [pc, #124]	@ (80002a0 <UART_Enable+0xa0>)
 8000222:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000226:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (7U << 4);
 8000228:	4b1d      	ldr	r3, [pc, #116]	@ (80002a0 <UART_Enable+0xa0>)
 800022a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800022c:	4a1c      	ldr	r2, [pc, #112]	@ (80002a0 <UART_Enable+0xa0>)
 800022e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000232:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7U << 8);
 8000234:	4b1a      	ldr	r3, [pc, #104]	@ (80002a0 <UART_Enable+0xa0>)
 8000236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000238:	4a19      	ldr	r2, [pc, #100]	@ (80002a0 <UART_Enable+0xa0>)
 800023a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800023e:	6253      	str	r3, [r2, #36]	@ 0x24

	USART1->CR1 &= ~(1U << 15); 	// Over sampling by 16
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <UART_Enable+0xa4>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a17      	ldr	r2, [pc, #92]	@ (80002a4 <UART_Enable+0xa4>)
 8000246:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800024a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1U << 12); 	// 8 data bits or word length
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <UART_Enable+0xa4>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a14      	ldr	r2, [pc, #80]	@ (80002a4 <UART_Enable+0xa4>)
 8000252:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000256:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1U << 10); 	// Disable parity
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <UART_Enable+0xa4>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a11      	ldr	r2, [pc, #68]	@ (80002a4 <UART_Enable+0xa4>)
 800025e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000262:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 3); 		// Transmitter enable
 8000264:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <UART_Enable+0xa4>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a0e      	ldr	r2, [pc, #56]	@ (80002a4 <UART_Enable+0xa4>)
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 2);		// Receiver enable
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <UART_Enable+0xa4>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a0b      	ldr	r2, [pc, #44]	@ (80002a4 <UART_Enable+0xa4>)
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	60d3      	str	r3, [r2, #12]
	USART1->BRR = 0x683;  		// setting baud-rate as 9600 for a 16 MHZ clock
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <UART_Enable+0xa4>)
 800027e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000282:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= (1 << 13);		// UART enable
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <UART_Enable+0xa4>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a06      	ldr	r2, [pc, #24]	@ (80002a4 <UART_Enable+0xa4>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800028e:	60d3      	str	r3, [r2, #12]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40011000 	.word	0x40011000

080002a8 <ADC_Enable>:

/*
 * ADC register enable
 */
void ADC_Enable(void) {
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (1U << 8); 			//Enable the ADC 1
 80002ac:	4b34      	ldr	r3, [pc, #208]	@ (8000380 <ADC_Enable+0xd8>)
 80002ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002b0:	4a33      	ldr	r2, [pc, #204]	@ (8000380 <ADC_Enable+0xd8>)
 80002b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002b6:	6453      	str	r3, [r2, #68]	@ 0x44
	GPIOA->MODER |= (3U << 2); 			//Analog mode PA 1
 80002b8:	4b32      	ldr	r3, [pc, #200]	@ (8000384 <ADC_Enable+0xdc>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a31      	ldr	r2, [pc, #196]	@ (8000384 <ADC_Enable+0xdc>)
 80002be:	f043 030c 	orr.w	r3, r3, #12
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (3U << 0); 			//Analog mode PA 0
 80002c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000384 <ADC_Enable+0xdc>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a2e      	ldr	r2, [pc, #184]	@ (8000384 <ADC_Enable+0xdc>)
 80002ca:	f043 0303 	orr.w	r3, r3, #3
 80002ce:	6013      	str	r3, [r2, #0]

	ADC1->CR1 &= ~(1U << 24); 		 // Reset the resolution for 12-bit
 80002d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000388 <ADC_Enable+0xe0>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000388 <ADC_Enable+0xe0>)
 80002d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002da:	6053      	str	r3, [r2, #4]
	ADC1->CR1 &= ~(1U << 25);
 80002dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000388 <ADC_Enable+0xe0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a29      	ldr	r2, [pc, #164]	@ (8000388 <ADC_Enable+0xe0>)
 80002e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80002e6:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= (1U << 8); 			//Enable scan mode
 80002e8:	4b27      	ldr	r3, [pc, #156]	@ (8000388 <ADC_Enable+0xe0>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a26      	ldr	r2, [pc, #152]	@ (8000388 <ADC_Enable+0xe0>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f2:	6053      	str	r3, [r2, #4]

	ADC1->CR2 |= (1U << 10);			//EOCS is selected
 80002f4:	4b24      	ldr	r3, [pc, #144]	@ (8000388 <ADC_Enable+0xe0>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a23      	ldr	r2, [pc, #140]	@ (8000388 <ADC_Enable+0xe0>)
 80002fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002fe:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U << 1);				//Continuous conversion
 8000300:	4b21      	ldr	r3, [pc, #132]	@ (8000388 <ADC_Enable+0xe0>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a20      	ldr	r2, [pc, #128]	@ (8000388 <ADC_Enable+0xe0>)
 8000306:	f043 0302 	orr.w	r3, r3, #2
 800030a:	6093      	str	r3, [r2, #8]

	ADC1->SMPR2 |= (3U << 0);		// Sample time is decided to be 56 cycles
 800030c:	4b1e      	ldr	r3, [pc, #120]	@ (8000388 <ADC_Enable+0xe0>)
 800030e:	691b      	ldr	r3, [r3, #16]
 8000310:	4a1d      	ldr	r2, [pc, #116]	@ (8000388 <ADC_Enable+0xe0>)
 8000312:	f043 0303 	orr.w	r3, r3, #3
 8000316:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= (3U << 3);
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <ADC_Enable+0xe0>)
 800031a:	691b      	ldr	r3, [r3, #16]
 800031c:	4a1a      	ldr	r2, [pc, #104]	@ (8000388 <ADC_Enable+0xe0>)
 800031e:	f043 0318 	orr.w	r3, r3, #24
 8000322:	6113      	str	r3, [r2, #16]

	ADC1->SQR1 |= (1U << 20);  		//No of channels is 2
 8000324:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <ADC_Enable+0xe0>)
 8000326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000328:	4a17      	ldr	r2, [pc, #92]	@ (8000388 <ADC_Enable+0xe0>)
 800032a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800032e:	62d3      	str	r3, [r2, #44]	@ 0x2c

	ADC1->SQR3 &= ~(0x1F << 0);		//Set Channel 0 as 1 in the sequence
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <ADC_Enable+0xe0>)
 8000332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000334:	4a14      	ldr	r2, [pc, #80]	@ (8000388 <ADC_Enable+0xe0>)
 8000336:	f023 031f 	bic.w	r3, r3, #31
 800033a:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (0U << 0);
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <ADC_Enable+0xe0>)
 800033e:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <ADC_Enable+0xe0>)
 8000340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000342:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 &= ~(0x1F << 5);		//Clearing the 2nd channel
 8000344:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <ADC_Enable+0xe0>)
 8000346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000348:	4a0f      	ldr	r2, [pc, #60]	@ (8000388 <ADC_Enable+0xe0>)
 800034a:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800034e:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (1U << 5);			//Set Channel 1 as 2 in the sequence
 8000350:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <ADC_Enable+0xe0>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000354:	4a0c      	ldr	r2, [pc, #48]	@ (8000388 <ADC_Enable+0xe0>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6353      	str	r3, [r2, #52]	@ 0x34

	ADC1->CR2 |= (1U << 0);			//ADC 1 ON
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <ADC_Enable+0xe0>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <ADC_Enable+0xe0>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U << 30); 			//SW start is enabled
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <ADC_Enable+0xe0>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a06      	ldr	r2, [pc, #24]	@ (8000388 <ADC_Enable+0xe0>)
 800036e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000372:	6093      	str	r3, [r2, #8]

}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40020000 	.word	0x40020000
 8000388:	40012000 	.word	0x40012000

0800038c <ADC_receive>:
		data_received[i++] = USART1->DR;
	}
	data_received[i] = '\0';
}

void ADC_receive(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++) {
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	e00f      	b.n	80003b8 <ADC_receive+0x2c>
		while (!(ADC1->SR & (1U << 1))) {
 8000398:	bf00      	nop
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <ADC_receive+0x40>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0302 	and.w	r3, r3, #2
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <ADC_receive+0xe>

		}
		ADC_Conversion_value[i] = ADC1->DR;
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <ADC_receive+0x40>)
 80003a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003aa:	4909      	ldr	r1, [pc, #36]	@ (80003d0 <ADC_receive+0x44>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 2; i++) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	ddec      	ble.n	8000398 <ADC_receive+0xc>
	}
	Delay();
 80003be:	f000 f809 	bl	80003d4 <Delay>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40012000 	.word	0x40012000
 80003d0:	2000001c 	.word	0x2000001c

080003d4 <Delay>:

void Delay(void){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0

	for(int i = 0; i >= 1000; i++) {
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	e002      	b.n	80003e6 <Delay+0x12>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3301      	adds	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003ec:	daf8      	bge.n	80003e0 <Delay+0xc>
		//send this for delay;
	}
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	@ (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000400:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	@ (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	@ (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <LoopForever+0xe>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	@ (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	@ (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 f811 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff fedd 	bl	80001ec <main>

08000432 <LoopForever>:

LoopForever:
  b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000440:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000444:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000448:	20000024 	.word	0x20000024

0800044c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC_IRQHandler>
	...

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	@ (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	@ (800048c <__libc_init_array+0x3c>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2600      	movs	r6, #0
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	@ (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	@ (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2600      	movs	r6, #0
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
