
UART_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000424  08000424  0000142c  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  0000142c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  0800042c  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000428  08000428  00001428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000142c  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000042f  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000016a  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000019f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199dc  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000703  00000000  00000000  0001b472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f407  00000000  00000000  0001bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aaf7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000cc  00000000  00000000  000aafc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  000ab08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000404 	.word	0x08000404

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000404 	.word	0x08000404

080001ec <main>:
void sendData(char*);
void receiveData(void);

char data_received[10] = { 0 };

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1U << 4); //Enabling UART peripheral
 80001f2:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <main+0x68>)
 80001f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001f6:	4a17      	ldr	r2, [pc, #92]	@ (8000254 <main+0x68>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	6453      	str	r3, [r2, #68]	@ 0x44

	RCC->AHB1ENR |= (1U << 0); //Enabling GPIOA port
 80001fe:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <main+0x68>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	4a14      	ldr	r2, [pc, #80]	@ (8000254 <main+0x68>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (10U << 18); // Enable Alternate function for GPIOA PIN_9 and PIN_10
 800020a:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <main+0x6c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <main+0x6c>)
 8000210:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000214:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (7U << 4);
 8000216:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <main+0x6c>)
 8000218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800021a:	4a0f      	ldr	r2, [pc, #60]	@ (8000258 <main+0x6c>)
 800021c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000220:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (7U << 8);
 8000222:	4b0d      	ldr	r3, [pc, #52]	@ (8000258 <main+0x6c>)
 8000224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000226:	4a0c      	ldr	r2, [pc, #48]	@ (8000258 <main+0x6c>)
 8000228:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800022c:	6253      	str	r3, [r2, #36]	@ 0x24

	UART_Enable();
 800022e:	f000 f819 	bl	8000264 <UART_Enable>

	while (1) {

		receiveData();
 8000232:	f000 f869 	bl	8000308 <receiveData>
		sendData("SUCESS\n");
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <main+0x70>)
 8000238:	f000 f846 	bl	80002c8 <sendData>

		for (int i = 0; i >= 100000; i++) {
 800023c:	2300      	movs	r3, #0
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	e002      	b.n	8000248 <main+0x5c>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	3301      	adds	r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <main+0x74>)
 800024c:	4293      	cmp	r3, r2
 800024e:	dcf8      	bgt.n	8000242 <main+0x56>
		receiveData();
 8000250:	e7ef      	b.n	8000232 <main+0x46>
 8000252:	bf00      	nop
 8000254:	40023800 	.word	0x40023800
 8000258:	40020000 	.word	0x40020000
 800025c:	0800041c 	.word	0x0800041c
 8000260:	0001869f 	.word	0x0001869f

08000264 <UART_Enable>:
		}
	}

}

void UART_Enable(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	USART1->CR1 &= ~(1U << 15); 	// Over sampling by 16
 8000268:	4b16      	ldr	r3, [pc, #88]	@ (80002c4 <UART_Enable+0x60>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a15      	ldr	r2, [pc, #84]	@ (80002c4 <UART_Enable+0x60>)
 800026e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000272:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1U << 12); 	// 8 data bits or word length
 8000274:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <UART_Enable+0x60>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <UART_Enable+0x60>)
 800027a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800027e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1U << 10); 	// Disable parity
 8000280:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <UART_Enable+0x60>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <UART_Enable+0x60>)
 8000286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800028a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 3); 		// Transmitter enable
 800028c:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <UART_Enable+0x60>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a0c      	ldr	r2, [pc, #48]	@ (80002c4 <UART_Enable+0x60>)
 8000292:	f043 0308 	orr.w	r3, r3, #8
 8000296:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= (1U << 2);		// Receiver enable
 8000298:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <UART_Enable+0x60>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a09      	ldr	r2, [pc, #36]	@ (80002c4 <UART_Enable+0x60>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	60d3      	str	r3, [r2, #12]
	USART1->BRR = 0x683;  		// setting baud-rate as 9600 for a 16 MHZ clock
 80002a4:	4b07      	ldr	r3, [pc, #28]	@ (80002c4 <UART_Enable+0x60>)
 80002a6:	f240 6283 	movw	r2, #1667	@ 0x683
 80002aa:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= (1 << 13);		// UART enable
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <UART_Enable+0x60>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <UART_Enable+0x60>)
 80002b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002b6:	60d3      	str	r3, [r2, #12]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40011000 	.word	0x40011000

080002c8 <sendData>:

void sendData(char *data) {
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	while (*data) {
 80002d0:	e00c      	b.n	80002ec <sendData+0x24>
		while (!(USART1->SR & (1U << 6))) {
 80002d2:	bf00      	nop
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <sendData+0x3c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <sendData+0xc>
			// Stay inside if the already loaded is not sent
		}
		USART1->DR = *data++;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	607a      	str	r2, [r7, #4]
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <sendData+0x3c>)
 80002ea:	605a      	str	r2, [r3, #4]
	while (*data) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d1ee      	bne.n	80002d2 <sendData+0xa>
	}

}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40011000 	.word	0x40011000

08000308 <receiveData>:

void receiveData(void) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	int i = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
	while (i <= sizeof(data_received) - 1) {
 8000312:	e017      	b.n	8000344 <receiveData+0x3c>
		while (!(USART1->SR & (1U << 5))) {
 8000314:	bf00      	nop
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <receiveData+0x58>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0320 	and.w	r3, r3, #32
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <receiveData+0xe>

		}
		char temp = USART1->DR;
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <receiveData+0x58>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	70fb      	strb	r3, [r7, #3]

		if (temp == '\n' || temp == '\r') {
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b0a      	cmp	r3, #10
 800032c:	d00d      	beq.n	800034a <receiveData+0x42>
 800032e:	78fb      	ldrb	r3, [r7, #3]
 8000330:	2b0d      	cmp	r3, #13
 8000332:	d00a      	beq.n	800034a <receiveData+0x42>
			break;
		}
		data_received[i++] = USART1->DR;
 8000334:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <receiveData+0x58>)
 8000336:	6859      	ldr	r1, [r3, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	607a      	str	r2, [r7, #4]
 800033e:	b2c9      	uxtb	r1, r1
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <receiveData+0x5c>)
 8000342:	54d1      	strb	r1, [r2, r3]
	while (i <= sizeof(data_received) - 1) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b09      	cmp	r3, #9
 8000348:	d9e4      	bls.n	8000314 <receiveData+0xc>
	}
	data_received[i] = '\0';
 800034a:	4a06      	ldr	r2, [pc, #24]	@ (8000364 <receiveData+0x5c>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4413      	add	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40011000 	.word	0x40011000
 8000364:	2000001c 	.word	0x2000001c

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	@ (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	@ (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff27 	bl	80001ec <main>

0800039e <LoopForever>:

LoopForever:
  b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ac:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b4:	20000028 	.word	0x20000028

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	@ (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	@ (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	@ (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	08000424 	.word	0x08000424
 80003f8:	08000424 	.word	0x08000424
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000428 	.word	0x08000428

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
