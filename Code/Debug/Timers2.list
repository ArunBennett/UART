
Timers2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003c4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003c4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003cc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004a5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000151  00000000  00000000  000024d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00002630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199dc  00000000  00000000  000026ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006af  00000000  00000000  0001c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f43e  00000000  00000000  0001c759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000abb97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  000abbdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  000abc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003ac 	.word	0x080003ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	080003ac 	.word	0x080003ac

080001ec <main>:


uint32_t dutyCycle = 0;
int step = 1;

int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    GPIO_Init();
 80001f0:	f000 f81e 	bl	8000230 <GPIO_Init>
    TIM3_PWM_Init();
 80001f4:	f000 f83a 	bl	800026c <TIM3_PWM_Init>

    while (1) {
        dutyCycle += step;
 80001f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <main+0x38>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000228 <main+0x3c>)
 80001fe:	6812      	ldr	r2, [r2, #0]
 8000200:	4413      	add	r3, r2
 8000202:	4a08      	ldr	r2, [pc, #32]	@ (8000224 <main+0x38>)
 8000204:	6013      	str	r3, [r2, #0]
        if (dutyCycle >= 100) {
 8000206:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <main+0x38>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b63      	cmp	r3, #99	@ 0x63
 800020c:	d902      	bls.n	8000214 <main+0x28>
            dutyCycle = 0;  // Reverse direction
 800020e:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <main+0x38>)
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
        }
        TIM3->CCR1 = dutyCycle;  // Update duty cycle
 8000214:	4a05      	ldr	r2, [pc, #20]	@ (800022c <main+0x40>)
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <main+0x38>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	6353      	str	r3, [r2, #52]	@ 0x34
        Delay(50);
 800021c:	2032      	movs	r0, #50	@ 0x32
 800021e:	f000 f85d 	bl	80002dc <Delay>
        dutyCycle += step;
 8000222:	e7e9      	b.n	80001f8 <main+0xc>
 8000224:	20000020 	.word	0x20000020
 8000228:	20000000 	.word	0x20000000
 800022c:	40000400 	.word	0x40000400

08000230 <GPIO_Init>:
    }
}

void GPIO_Init(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	RCC->AHB1ENR 	|= (1U << 0);  // Enable GPIO clock
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <GPIO_Init+0x34>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <GPIO_Init+0x34>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	|= (1U << 13);
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <GPIO_Init+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a08      	ldr	r2, [pc, #32]	@ (8000268 <GPIO_Init+0x38>)
 8000246:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800024a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] 	|= (2U << 24);
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <GPIO_Init+0x38>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	4a05      	ldr	r2, [pc, #20]	@ (8000268 <GPIO_Init+0x38>)
 8000252:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000256:	6213      	str	r3, [r2, #32]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020000 	.word	0x40020000

0800026c <TIM3_PWM_Init>:

void TIM3_PWM_Init(void) {
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // Enable TIM3 clock
 8000270:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <TIM3_PWM_Init+0x68>)
 8000272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000274:	4a17      	ldr	r2, [pc, #92]	@ (80002d4 <TIM3_PWM_Init+0x68>)
 8000276:	f043 0302 	orr.w	r3, r3, #2
 800027a:	6413      	str	r3, [r2, #64]	@ 0x40
    // Auto-reload (Period = 1ms)
    TIM3->PSC = (320 - 1);
 800027c:	4b16      	ldr	r3, [pc, #88]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 800027e:	f240 123f 	movw	r2, #319	@ 0x13f
 8000282:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = (1000 - 1);
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 8000286:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800028a:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1 on CH1
    TIM3->CCMR1 |= (6U << TIM_CCMR1_OC1M_Pos);
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a11      	ldr	r2, [pc, #68]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 8000292:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000296:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= TIM_CCMR1_OC1PE;
 8000298:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a0e      	ldr	r2, [pc, #56]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 800029e:	f043 0308 	orr.w	r3, r3, #8
 80002a2:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1E;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6213      	str	r3, [r2, #32]

    TIM3->CR1 |= TIM_CR1_ARPE;
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 80002b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ba:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN; // Enable Timer
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <TIM3_PWM_Init+0x6c>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6013      	str	r3, [r2, #0]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40000400 	.word	0x40000400

080002dc <Delay>:

void Delay(uint32_t delay) {
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < delay * 1000; i++) {
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	e002      	b.n	80002f0 <Delay+0x14>
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	3301      	adds	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3f4      	bcc.n	80002ea <Delay+0xe>
    }
}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ff53 	bl	80001ec <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800035c:	20000024 	.word	0x20000024

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	@ (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	@ (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	@ (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	@ (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
